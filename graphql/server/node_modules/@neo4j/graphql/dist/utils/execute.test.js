"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const execute_1 = __importDefault(require("./execute"));
const environment_1 = __importDefault(require("../environment"));
const _1 = require(".");
describe("execute", () => {
    test("should execute return records.toObject", () => __awaiter(void 0, void 0, void 0, function* () {
        yield Promise.all(["READ", "WRITE"].map((access) => __awaiter(void 0, void 0, void 0, function* () {
            const defaultAccessMode = access;
            const cypher = `
                    CREATE (u:User {title: $title})
                    RETURN u { .title } as u
                `;
            const title = "some title";
            const params = { title };
            const records = [{ toObject: () => ({ title }) }];
            const database = "neo4j";
            const bookmarks = ["test"];
            // @ts-ignore
            const driver = {
                // @ts-ignore
                session: (options) => {
                    expect(options).toMatchObject({ defaultAccessMode, database, bookmarks });
                    const tx = {
                        run: (paramCypher, paramParams) => {
                            expect(paramCypher).toEqual(cypher);
                            expect(paramParams).toEqual(params);
                            return { records };
                        },
                    };
                    return {
                        readTransaction: (fn) => {
                            // @ts-ignore
                            return fn(tx);
                        },
                        writeTransaction: (fn) => {
                            // @ts-ignore
                            return fn(tx);
                        },
                        close: () => true,
                    };
                },
                // @ts-ignore
                _config: {},
            };
            // @ts-ignore
            const neoSchema = {
                // @ts-ignore
                options: {},
            };
            const result = yield execute_1.default({
                cypher,
                params,
                defaultAccessMode,
                context: { driverConfig: { database, bookmarks }, neoSchema, driver },
            });
            expect(result).toEqual([{ title }]);
            // @ts-ignore
            expect(driver._userAgent).toEqual(`${environment_1.default.NPM_PACKAGE_NAME}/${environment_1.default.NPM_PACKAGE_VERSION}`);
            // @ts-ignore
            expect(driver._config.userAgent).toEqual(`${environment_1.default.NPM_PACKAGE_NAME}/${environment_1.default.NPM_PACKAGE_VERSION}`);
        })));
    }));
    describe("should set query options", () => {
        test("no query options if object is empty", () => __awaiter(void 0, void 0, void 0, function* () {
            const defaultAccessMode = "READ";
            const cypher = _1.trimmer(`
                CREATE (u:User {title: $title})
                RETURN u { .title } as u
            `);
            const title = "some title";
            const params = { title };
            const records = [{ toObject: () => ({ title }) }];
            const database = "neo4j";
            const bookmarks = ["test"];
            // @ts-ignore
            const driver = {
                // @ts-ignore
                session: (options) => {
                    expect(options).toMatchObject({ defaultAccessMode, database, bookmarks });
                    const tx = {
                        run: (paramCypher, paramParams) => {
                            expect(_1.trimmer(paramCypher)).toEqual(cypher);
                            expect(paramParams).toEqual(params);
                            return { records };
                        },
                    };
                    return {
                        readTransaction: (fn) => {
                            // @ts-ignore
                            return fn(tx);
                        },
                        writeTransaction: (fn) => {
                            // @ts-ignore
                            return fn(tx);
                        },
                        close: () => true,
                    };
                },
                // @ts-ignore
                _config: {},
            };
            // @ts-ignore
            const neoSchema = {
                // @ts-ignore
                options: {},
            };
            const result = yield execute_1.default({
                cypher,
                params,
                defaultAccessMode,
                context: {
                    driverConfig: { database, bookmarks },
                    neoSchema,
                    driver,
                    queryOptions: {},
                },
            });
            expect(result).toEqual([{ title }]);
            // @ts-ignore
            expect(driver._userAgent).toEqual(`${environment_1.default.NPM_PACKAGE_NAME}/${environment_1.default.NPM_PACKAGE_VERSION}`);
            // @ts-ignore
            expect(driver._config.userAgent).toEqual(`${environment_1.default.NPM_PACKAGE_NAME}/${environment_1.default.NPM_PACKAGE_VERSION}`);
        }));
        test("one of each query option", () => __awaiter(void 0, void 0, void 0, function* () {
            const defaultAccessMode = "READ";
            const inputCypher = _1.trimmer(`
            CREATE (u:User {title: $title})
            RETURN u { .title } as u
        `);
            const expectedCypher = _1.trimmer(`
            CYPHER runtime=interpreted planner=cost connectComponentsPlanner=greedy updateStrategy=default expressionEngine=compiled operatorEngine=compiled interpretedPipesFallback=all replan=default
            CREATE (u:User {title: $title})
            RETURN u { .title } as u
        `);
            const title = "some title";
            const params = { title };
            const records = [{ toObject: () => ({ title }) }];
            const database = "neo4j";
            const bookmarks = ["test"];
            // @ts-ignore
            const driver = {
                // @ts-ignore
                session: (options) => {
                    expect(options).toMatchObject({ defaultAccessMode, database, bookmarks });
                    const tx = {
                        run: (paramCypher, paramParams) => {
                            expect(_1.trimmer(paramCypher)).toEqual(expectedCypher);
                            expect(paramParams).toEqual(params);
                            return { records };
                        },
                    };
                    return {
                        readTransaction: (fn) => {
                            // @ts-ignore
                            return fn(tx);
                        },
                        writeTransaction: (fn) => {
                            // @ts-ignore
                            return fn(tx);
                        },
                        close: () => true,
                    };
                },
                // @ts-ignore
                _config: {},
            };
            // @ts-ignore
            const neoSchema = {
                // @ts-ignore
                options: {},
            };
            const result = yield execute_1.default({
                cypher: inputCypher,
                params,
                defaultAccessMode,
                context: {
                    driverConfig: { database, bookmarks },
                    neoSchema,
                    driver,
                    queryOptions: {
                        runtime: types_1.CypherRuntime.INTERPRETED,
                        planner: types_1.CypherPlanner.COST,
                        connectComponentsPlanner: types_1.CypherConnectComponentsPlanner.GREEDY,
                        updateStrategy: types_1.CypherUpdateStrategy.DEFAULT,
                        expressionEngine: types_1.CypherExpressionEngine.COMPILED,
                        operatorEngine: types_1.CypherOperatorEngine.COMPILED,
                        interpretedPipesFallback: types_1.CypherInterpretedPipesFallback.ALL,
                        replan: types_1.CypherReplanning.DEFAULT,
                    },
                },
            });
            expect(result).toEqual([{ title }]);
            // @ts-ignore
            expect(driver._userAgent).toEqual(`${environment_1.default.NPM_PACKAGE_NAME}/${environment_1.default.NPM_PACKAGE_VERSION}`);
            // @ts-ignore
            expect(driver._config.userAgent).toEqual(`${environment_1.default.NPM_PACKAGE_NAME}/${environment_1.default.NPM_PACKAGE_VERSION}`);
        }));
    });
});
//# sourceMappingURL=execute.test.js.map