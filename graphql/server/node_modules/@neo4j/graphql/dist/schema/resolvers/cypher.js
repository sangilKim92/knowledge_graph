"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const neo4j_driver_1 = require("neo4j-driver");
const utils_1 = require("../../utils");
const to_compose_1 = require("../to-compose");
const create_auth_and_params_1 = __importDefault(require("../../translate/create-auth-and-params"));
const create_auth_param_1 = __importDefault(require("../../translate/create-auth-param"));
const constants_1 = require("../../constants");
const create_projection_and_params_1 = __importDefault(require("../../translate/create-projection-and-params"));
function cypherResolver({ field, statement, type, }) {
    function resolve(_root, args, _context) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const context = _context;
            const { resolveTree: { fieldsByTypeName }, } = context;
            const cypherStrs = [];
            let params = Object.assign(Object.assign({}, args), { auth: create_auth_param_1.default({ context }), cypherParams: context.cypherParams });
            let projectionStr = "";
            let projectionAuthStr = "";
            const isPrimitive = ["ID", "String", "Boolean", "Float", "Int", "DateTime", "BigInt"].includes(field.typeMeta.name);
            const preAuth = create_auth_and_params_1.default({ entity: field, context });
            if (preAuth[0]) {
                params = Object.assign(Object.assign({}, params), preAuth[1]);
                cypherStrs.push(`CALL apoc.util.validate(NOT(${preAuth[0]}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`);
            }
            const referenceNode = context.neoSchema.nodes.find((x) => x.name === field.typeMeta.name);
            if (referenceNode) {
                const recurse = create_projection_and_params_1.default({
                    fieldsByTypeName,
                    node: referenceNode,
                    context,
                    varName: `this`,
                });
                [projectionStr] = recurse;
                params = Object.assign(Object.assign({}, params), recurse[1]);
                if ((_b = (_a = recurse[2]) === null || _a === void 0 ? void 0 : _a.authValidateStrs) === null || _b === void 0 ? void 0 : _b.length) {
                    projectionAuthStr = recurse[2].authValidateStrs.join(" AND ");
                }
            }
            const initApocParamsStrs = ["auth: $auth", ...(context.cypherParams ? ["cypherParams: $cypherParams"] : [])];
            const apocParams = Object.entries(args).reduce((r, entry) => {
                return {
                    strs: [...r.strs, `${entry[0]}: $${entry[0]}`],
                    params: Object.assign(Object.assign({}, r.params), { [entry[0]]: entry[1] }),
                };
            }, { strs: initApocParamsStrs, params });
            const apocParamsStr = `{${apocParams.strs.length ? `${apocParams.strs.join(", ")}` : ""}}`;
            const expectMultipleValues = field.typeMeta.array ? "true" : "false";
            if (type === "Query") {
                cypherStrs.push(`
                WITH apoc.cypher.runFirstColumn("${statement}", ${apocParamsStr}, ${expectMultipleValues}) as x
                UNWIND x as this
                WITH this
            `);
            }
            else {
                cypherStrs.push(`
                CALL apoc.cypher.doIt("${statement}", ${apocParamsStr}) YIELD value
                WITH apoc.map.values(value, [keys(value)[0]])[0] AS this
            `);
            }
            if (projectionAuthStr) {
                cypherStrs.push(`WHERE apoc.util.validatePredicate(NOT(${projectionAuthStr}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`);
            }
            if (!isPrimitive) {
                cypherStrs.push(`RETURN this ${projectionStr} AS this`);
            }
            else {
                cypherStrs.push(`RETURN this`);
            }
            const result = yield utils_1.execute({
                cypher: cypherStrs.join("\n"),
                params,
                defaultAccessMode: "WRITE",
                raw: true,
                context,
            });
            const values = result.records.map((record) => {
                // eslint-disable-next-line no-underscore-dangle
                const value = record._fields[0];
                if (["number", "string", "boolean"].includes(typeof value)) {
                    return value;
                }
                if (!value) {
                    return undefined;
                }
                if (neo4j_driver_1.isInt(value)) {
                    return Number(value);
                }
                if (value.identity && value.labels && value.properties) {
                    return value.properties;
                }
                return value;
            });
            if (!field.typeMeta.array) {
                return values[0];
            }
            return values;
        });
    }
    return {
        type: field.typeMeta.pretty,
        resolve,
        args: to_compose_1.graphqlArgsToCompose(field.arguments),
    };
}
exports.default = cypherResolver;
//# sourceMappingURL=cypher.js.map