"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const pluralize_1 = __importDefault(require("pluralize"));
const camelcase_1 = __importDefault(require("camelcase"));
const graphql_2 = require("@neo4j/graphql");
function printSelectionSet(selectionSet) {
    if (typeof selectionSet === "string") {
        return graphql_1.print(graphql_1.parse(selectionSet));
    }
    return graphql_1.print(selectionSet);
}
class Model {
    constructor(input) {
        this.name = input.name;
        this.namePluralized = pluralize_1.default(input.name);
        this.camelCaseName = camelcase_1.default(this.namePluralized);
        this.neoSchema = input.neoSchema;
        this.selectionSet = input.selectionSet;
    }
    setSelectionSet(selectionSet) {
        this.selectionSet = printSelectionSet(selectionSet);
    }
    find({ where, options, selectionSet, args = {}, context = {}, rootValue = null, } = {}) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const argDefinitions = [
                `${where || options ? "(" : ""}`,
                `${where ? `$where: ${this.name}Where` : ""}`,
                `${options ? `$options: ${this.name}Options` : ""}`,
                `${where || options ? ")" : ""}`,
            ];
            const argsApply = [
                `${where || options ? "(" : ""}`,
                `${where ? `where: $where` : ""}`,
                `${options ? `options: $options` : ""}`,
                `${where || options ? ")" : ""}`,
            ];
            const selection = printSelectionSet(selectionSet || this.selectionSet);
            const query = `
            query ${argDefinitions.join(" ")}{
                ${this.camelCaseName}${argsApply.join(" ")} ${selection}
            }
        `;
            const variableValues = Object.assign({ where, options }, args);
            const result = yield graphql_1.graphql(this.neoSchema.schema, query, rootValue, context, variableValues);
            if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
                throw new Error(result.errors[0].message);
            }
            return result.data[this.camelCaseName];
        });
    }
    create({ input, selectionSet, args = {}, context = {}, rootValue = null, } = {}) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const mutationName = `create${graphql_2.upperFirst(this.namePluralized)}`;
            let selection = "";
            if (selectionSet) {
                selection = printSelectionSet(selectionSet);
            }
            else {
                selection = `
               {
                   ${this.camelCaseName}
                   ${printSelectionSet(selectionSet || this.selectionSet)}
               }
           `;
            }
            const mutation = `
            mutation ($input: [${this.name}CreateInput!]!){
               ${mutationName}(input: $input) ${selection}
            }
        `;
            const variableValues = Object.assign(Object.assign({}, args), { input });
            const result = yield graphql_1.graphql(this.neoSchema.schema, mutation, rootValue, context, variableValues);
            if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
                throw new Error(result.errors[0].message);
            }
            return result.data[mutationName];
        });
    }
    update({ where, update, connect, disconnect, create, selectionSet, args = {}, context = {}, rootValue = null, } = {}) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const mutationName = `update${graphql_2.upperFirst(this.namePluralized)}`;
            let selection = "";
            if (selectionSet) {
                selection = printSelectionSet(selectionSet);
            }
            else {
                selection = `
               {
                   ${this.camelCaseName}
                   ${printSelectionSet(selectionSet || this.selectionSet)}
               }
           `;
            }
            const argWorthy = where || update || connect || disconnect || create;
            const argDefinitions = [
                `${argWorthy ? "(" : ""}`,
                `${where ? `$where: ${this.name}Where` : ""}`,
                `${update ? `$update: ${this.name}UpdateInput` : ""}`,
                `${connect ? `$connect: ${this.name}ConnectInput` : ""}`,
                `${disconnect ? `$disconnect: ${this.name}DisconnectInput` : ""}`,
                `${create ? `$create: ${this.name}RelationInput` : ""}`,
                `${argWorthy ? ")" : ""}`,
            ];
            const argsApply = [
                `${argWorthy ? "(" : ""}`,
                `${where ? `where: $where` : ""}`,
                `${update ? `update: $update` : ""}`,
                `${connect ? `connect: $connect` : ""}`,
                `${disconnect ? `disconnect: $disconnect` : ""}`,
                `${create ? `create: $create` : ""}`,
                `${argWorthy ? ")" : ""}`,
            ];
            const mutation = `
            mutation ${argDefinitions.join(" ")}{
               ${mutationName}${argsApply.join(" ")}
               ${selection}
            }
        `;
            const variableValues = Object.assign(Object.assign({}, args), { where, update, connect, disconnect, create });
            const result = yield graphql_1.graphql(this.neoSchema.schema, mutation, rootValue, context, variableValues);
            if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
                throw new Error(result.errors[0].message);
            }
            return result.data[mutationName];
        });
    }
    delete({ where, delete: deleteInput, context = {}, rootValue = null, } = {}) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const mutationName = `delete${graphql_2.upperFirst(this.namePluralized)}`;
            const argWorthy = where || deleteInput;
            const argDefinitions = [
                `${argWorthy ? "(" : ""}`,
                `${where ? `$where: ${this.name}Where` : ""}`,
                `${deleteInput ? `$delete: ${this.name}DeleteInput` : ""}`,
                `${argWorthy ? ")" : ""}`,
            ];
            const argsApply = [
                `${argWorthy ? "(" : ""}`,
                `${where ? `where: $where` : ""}`,
                `${deleteInput ? `delete: $delete` : ""}`,
                `${argWorthy ? ")" : ""}`,
            ];
            const mutation = `
            mutation ${argDefinitions.join(" ")}{
               ${mutationName}${argsApply.join(" ")} {
                   nodesDeleted
                   relationshipsDeleted
               }
            }
        `;
            const variableValues = { where, delete: deleteInput };
            const result = yield graphql_1.graphql(this.neoSchema.schema, mutation, rootValue, context, variableValues);
            if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
                throw new Error(result.errors[0].message);
            }
            return result.data[mutationName];
        });
    }
}
exports.default = Model;
//# sourceMappingURL=Model.js.map