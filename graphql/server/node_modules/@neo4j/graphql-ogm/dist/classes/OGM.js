"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("@neo4j/graphql");
const Model_1 = __importDefault(require("./Model"));
const utils_1 = require("../utils");
class OGM {
    constructor(input) {
        const { typeDefs } = input, rest = __rest(input, ["typeDefs"]);
        const neoSchema = new graphql_1.Neo4jGraphQL(Object.assign(Object.assign({}, rest), { typeDefs: utils_1.filterDocument(typeDefs) }));
        this.checkNeo4jCompat = function checkNeo4jCompat() {
            var _a;
            return neoSchema.checkNeo4jCompat(Object.assign({ driver: rest.driver }, (((_a = rest.config) === null || _a === void 0 ? void 0 : _a.driverConfig) ? { driverConfig: rest.config.driverConfig } : {})));
        };
        this.models = neoSchema.nodes.map((n) => {
            const selectionSet = `
                {
                    ${[n.primitiveFields, n.scalarFields, n.enumFields, n.dateTimeFields].reduce((res, v) => [...res, ...v.map((x) => x.fieldName)], [])}
                }
            `;
            return new Model_1.default({
                neoSchema,
                name: n.name,
                selectionSet,
            });
        });
    }
    model(name) {
        const found = this.models.find((n) => n.name === name);
        if (!found) {
            throw new Error(`Could not find model ${name}`);
        }
        return found;
    }
}
exports.default = OGM;
//# sourceMappingURL=OGM.js.map